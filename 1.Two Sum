1.class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> search;
        for(int i=0;i<nums.size();i++) {
            int num_to_find=target-nums[i];
            if(search.count(num_to_find))//如果這個要找的數字已經有在unordered_map裡
            {
                return{i,search[num_to_find]};
            }
            else{
                search[nums[i]]=i;//把這個數字加到unodered_map裡，之後有看到它需要的數字時就可以立即找到
            }
        }
        return{};
    }
};
這題讓我發現可以用不同的方式去尋找要的數字，這樣只要O(n)
本來我只會用O(n^2)的方法寫
